import streamlit as st
import pandas as pd
import io
import gpxpy
from src.parser import open_gpx, GPXData
import authentification as auth


def format_garmin_df(df):
    df_display = df.copy()

    # Formater la date en JJ/MM/AAAA
    df_display["startTimeLocal"] = pd.to_datetime(df_display["startTimeLocal"]).dt.strftime("%d/%m/%Y")

    # Arrondir distance et d√©nivel√©
    df_display["distance_km"] = df_display["distance_km"].round(1)
    df_display["elev_gain"] = df_display["elev_gain"].round(1)

    # Formater la dur√©e en h:mm
    def format_duration(minutes):
        h = int(minutes // 60)
        m = int(minutes % 60)
        return f"{h}:{m:02d}"

    df_display["duration_minutes"] = df_display["duration_minutes"].apply(format_duration)

    # Renommer les colonnes pour affichage
    df_display = df_display.rename(columns={
        "startTimeLocal": "Date",
        "activityName": "Activit√©",
        "distance_km": "Distance (km)",
        "duration_minutes": "Dur√©e",
        "elev_gain": "D√©nivel√© positif (m)",
        "S√©lectionner": "S√©lectionner"
    })

    # Garder seulement les colonnes utiles
    return df_display[["Date", "Activit√©", "Distance (km)", "Dur√©e", "D√©nivel√© positif (m)", "S√©lectionner"]]


def render_garmin_tab():
    st.subheader("Connexion Garmin Connect")

    if "garmin" not in st.session_state:
        auth.garmin_auth()

    else:
        garmin = st.session_state["garmin"]
        st.success(f"Bienvenue {garmin.get_full_name()} ‚úÖ")
        st.success("‚úÖ Connect√© √† Garmin Connect")

        if st.button("Se d√©connecter"):
            auth.garmin_logout()

        # S√©lecteurs de dates
        st.write("### üìÖ S√©lection des activit√©s")
        col1, col2 = st.columns(2)
        date_debut = col1.date_input("Date d√©but")
        date_fin = col2.date_input("Date fin")

        if st.button("Charger les activit√©s"):
            try:
                activities = garmin.get_activities_by_date(date_debut, date_fin)
                st.session_state["activities"] = activities
                st.success(f"{len(activities)} activit√©s r√©cup√©r√©es ‚úÖ")
            except Exception as e:
                st.error(f"Erreur r√©cup√©ration activit√©s : {e}")

        if "activities" in st.session_state:
            df = pd.DataFrame(st.session_state["activities"])

            # Normalisation colonnes
            df["distance_km"] = df["distance"] / 1000
            df["duration_minutes"] = df["duration"] / 60
            df["elev_gain"] = df["elevationGain"]
            df["S√©lectionner"] = False  # checkbox colonne

            # Filtres
            st.write("### üéõÔ∏è Filtres")
            min_dist = st.number_input("Distance min (km)", 0.0, 500.0, 0.0, step=1.0)
            max_dist = st.number_input("Distance max (km)", 0.0, 500.0, 500.0, step=1.0)
            min_dplus = st.number_input("D√©nivel√© + min (m)", 0, 10000, 0, step=100)
            min_duree = st.number_input("Dur√©e min (min)", 0, 10000, 0, step=10)

            df_filtered = df[
                (df["distance_km"] >= min_dist)
                & (df["distance_km"] <= max_dist)
                & (df["elev_gain"] >= min_dplus)
                & (df["duration_minutes"] >= min_duree)
            ]

            df_filtered_display = format_garmin_df(df_filtered)

            # Tableau interactif
            edited_df = st.data_editor(
                df_filtered_display,
                hide_index=True,
                use_container_width=True,
                num_rows="dynamic",
            )

            # Bouton pour analyser la s√©lection
            selected = edited_df[edited_df["S√©lectionner"] == True]
            if not selected.empty and st.button("üì• Analyser la s√©lection"):
                try:
                    # On prend le premier s√©lectionn√© (tu peux adapter pour multi)
                    act_id = selected.iloc[0]["activityId"]
                    raw_bytes = garmin.download_activity(act_id, garmin.ActivityDownloadFormat.GPX)
                    gpx = gpxpy.parse(io.BytesIO(raw_bytes))
                    route = open_gpx(io.BytesIO(raw_bytes))
                    st.session_state["route"] = route
                    st.success(f"‚úÖ Activit√© {act_id} envoy√©e dans l‚Äôonglet Analyse GPX !")
                    st.rerun()
                except Exception as e:
                    st.error(f"Erreur lors du t√©l√©chargement/analyse GPX : {e}")
